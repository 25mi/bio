{"version":3,"sources":["../src/client.js"],"names":["Primus","require","EventEmitter","ClientTracker","Disconnected","Timeout","relayer","event","target","args","emit","Client","url","sessionId","transformer","websockets","reconnectTimeout","ReconnectTimeout","pingTimeout","PingTimeout","pathname","Pathname","_readSessionId","reader","_writeSessionId","writer","Socket","createSocket","plugin","_socket","manual","reconnect","max","Infinity","min","retries","factor","timeout","fortress","mirage","_tracker","_opened","_rid","Date","getTime","_init","console","log","open","end","name","body","cfg","ReplyTimeout","id","meta","connected","Promise","resolve","setTimeout","clone","toObject","resolved","once","result","removeAllListeners","topic","cb","code","on","removeListener","events","e","bind","_relay","module","exports"],"mappings":"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","file":"client.js","sourcesContent":["/*\n * Created by Henry Leu (henryleu@126.com) on 2018/1/22\n */\nconst Primus = require('primus');\nconst EventEmitter = require('eventemitter3');\n\nconst ClientTracker = require('./tracker');\nconst { Disconnected, Timeout } = require('./outputs');\nconst relayer = (event, target) => (...args) => target.emit(event, ...args);\n\nclass Client extends EventEmitter {\n    static get ReplyTimeout () { return 2000; } // the timeout to get a response event\n    static get ReconnectTimeout () { return 15000; }\n    static get PingTimeout () { return 35000; }\n    static get Pathname () { return '/primus'; } // server url parameter\n\n    constructor ({\n        url,\n        sessionId = {},\n        transformer = 'WebSockets',\n        websockets = true,\n        reconnectTimeout = Client.ReconnectTimeout,\n        pingTimeout = Client.PingTimeout,\n        pathname = Client.Pathname\n    }) {\n        super();\n        this._readSessionId = sessionId.reader;\n        this._writeSessionId = sessionId.writer;\n        this.sessionId = this._readSessionId && this._readSessionId();\n\n        const Socket = Primus.createSocket({\n            transformer, // WebSockets | sockjs\n            plugin: {\n                'mirage': require('mirage'),\n                'emit': require('primus-emit')\n            }\n        }); // WebSockets\n\n        this._socket = new Socket(url, {\n            manual: true,\n            websockets,\n            reconnect: {\n                max: Infinity // Number: The max delay before we try to reconnect.\n                , min: 500 // Number: The minimum delay before we try reconnect.\n                , retries: 20 // Number: How many times we should try to reconnect.\n                , 'reconnect timeout': 10000\n                , factor: 2\n            },\n            // strategy: false,\n            timeout: reconnectTimeout,\n            pingTimeout,\n            pathname, // server url parameter, by default, '/primus'\n            fortress: 'spark', // validate target\n            mirage: this.sessionId\n        });\n        this._tracker = new ClientTracker();\n        this._opened = false;\n        this._rid = new Date().getTime() * 1000;\n        this._init();\n    }\n\n    open () {\n        if (this._opened) return console.log('ignore opening the opened client');\n        this._opened = true;\n        this._socket.open();\n    }\n\n    end () {\n        if (!this._opened) return console.log('ignore ending for the ended client');\n        this._opened = false;\n        this._socket.end();\n    }\n\n    request (name, body, cfg) {\n        const timeout = (cfg && cfg.timeout) || Client.ReplyTimeout;\n        const id = this._rid++; // todo generateId\n        const meta = {id, name, timeout};\n\n        if (!this._tracker.connected) {\n            return new Promise((resolve) => {\n                setTimeout(() => resolve({meta: Disconnected.clone(meta).toObject()}), 0);\n            });\n        }\n        this._socket.emit('request', {meta, body});\n\n        return new Promise((resolve) => {\n            const event = `response [id=${id}]`;\n            let resolved = false;\n            this._socket.once(event, (result) => {\n                if (resolved) return;\n                resolved = true;\n                resolve(result);\n            });\n            setTimeout(() => {\n                if (resolved) return;\n                resolved = true;\n                this._socket.removeAllListeners(event);\n                resolve({meta: Timeout.clone(meta).toObject()});\n            }, timeout);\n        });\n    }\n\n    subscribe (topic, cb) {\n        const id = this._rid++;\n        if (!this._tracker.connected) {\n            return new Promise((resolve) => {\n                setTimeout(() => resolve(Disconnected.clone({id, topic}).toObject()), 0);\n            });\n        }\n        this._socket.emit('subscribe', {topic, id});\n\n        return new Promise((resolve) => {\n            const event = `subscribed ${topic} ${id}`;\n            let resolved = false;\n            this._socket.once(event, (result) => {\n                if (resolved) return;\n                resolved = true;\n                if (!result.code) { // subscribed successfully\n                    this._socket.on('publish ' + topic, cb);\n                }\n                resolve(result);\n            });\n            setTimeout(() => {\n                if (resolved) return;\n                resolved = true;\n                this._socket.removeAllListeners(event);\n                resolve({meta: Timeout.clone({id, topic}).toObject()});\n            }, Client.ReplyTimeout);\n        });\n    }\n\n    unsubscribe (topic, cfg, cb) {\n        if (typeof cfg === 'function') {\n            cb = cfg;\n            cfg = {};\n        }\n        const timeout = (cfg && cfg.timeout) || Client.ReplyTimeout;\n        const id = this._rid++;\n        if (!this._tracker.connected) {\n            return new Promise((resolve) => {\n                setTimeout(() => resolve(Disconnected.clone({id, topic}).toObject()), 0);\n            });\n        }\n        this._socket.emit('unsubscribe', {topic, id});\n\n        return new Promise((resolve) => {\n            const event = `unsubscribed ${topic} ${id}`;\n            let resolved = false;\n            this._socket.once(event, (result) => {\n                if (resolved) return;\n                resolved = true;\n                if (!result.code) { // unsubscribed successfully\n                    if (cb) {\n                        this._socket.removeListener('publish ' + topic, cb);\n                    } else {\n                        this._socket.removeAllListeners('publish ' + topic);\n                    }\n                }\n                resolve(result);\n            });\n            setTimeout(() => {\n                if (resolved) return;\n                resolved = true;\n                this._socket.removeAllListeners(event);\n                resolve({meta: Timeout.clone({id, topic}).toObject()});\n            }, timeout);\n        });\n    }\n\n    publish (topic, ...args) {\n        const id = this._rid++;\n        if (!this._tracker.connected) {\n            return new Promise((resolve) => {\n                setTimeout(() => resolve(Disconnected.clone({id, topic, args}).toObject()), 0);\n            });\n        }\n        this._socket.emit('publish', {topic, id, args});\n\n        return new Promise((resolve) => {\n            const event = `published ${topic} ${id}`;\n            let resolved = false;\n            this._socket.once(event, (result) => {\n                if (resolved) return;\n                resolved = true;\n                resolve(result);\n            });\n            setTimeout(() => {\n                if (resolved) return;\n                resolved = true;\n                this._socket.removeAllListeners(event);\n                resolve({meta: Timeout.clone({id, topic, args}).toObject()});\n            }, Client.ReplyTimeout);\n        });\n    }\n\n    _relay (...events) {\n        for (const e of events) this._socket.on(e, relayer(e, this));\n    }\n\n    _init () {\n        this._tracker.bind(this._socket);\n        this._relay('open', 'close', 'reconnect', 'data', 'error');\n\n        /**\n         * get session id from server and save it at client side\n         * if client is initiated without session id\n         */\n        this._writeSessionId && this._socket.on('mirage', (id) => this._writeSessionId(id));\n    }\n}\n\nmodule.exports = Client;\n"]}