{"version":3,"sources":["../src/queue.js"],"names":["EventEmitter","require","LostJobData","Idle","WIP","_workerId","nextWorkerId","RetryInterval","PingInterval","CommitRetries","CheckoutRetries","isoOutput","output","Object","assign","meta","body","QueueAgent","client","prefix","listeners","job","data","request","then","id","error","listener","subscribe","unsubscribe","Worker","manager","jobName","onProcess","status","workerId","timer","stopping","console","log","requestJob","stopRetry","msg","startRetry","failJob","_id","code","completeJob","err","Error","stack","toString","e","doRequestJob","clone","processJob","retries","interval","fn","next","setInterval","clearInterval","Manager","queue","concurs","workers","agent","started","_init","worker","start","subscribeJob","stop","unsubscribeJob","queued","i","notify","bind","push","Queue","name","Name","Prefix","managers","createJob","module","exports"],"mappings":"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","file":"queue.js","sourcesContent":["/*\n * Created by Henry Leu (henryleu@126.com) on 2018/1/22\n */\nconst EventEmitter = require('eventemitter3');\nconst { LostJobData } = require('./outputs');\n\nconst Idle = 0;\nconst WIP = 1;\n// let _workerId = new Date().getTime() - (40 * 365 * 24 * 3600000);\nlet _workerId = 1;\nconst nextWorkerId = () => _workerId++;\nconst RetryInterval = 1000;\nconst PingInterval = 5000;\nconst CommitRetries = 20;\nconst CheckoutRetries = 10;\nconst isoOutput = (output) => Object.assign({}, output.meta, output.body);\n\nclass QueueAgent {\n    constructor (client, {prefix = 'queue.'}) {\n        this.client = client;\n        this.prefix = prefix;\n        this.listeners = {}; // todo verify if need it\n    }\n\n    createJob (job, data) {\n        return this.client.request(this.prefix + 'createJob', [job, data]).then(isoOutput);\n    }\n\n    requestJob (job) {\n        return this.client.request(this.prefix + 'requestJob', [job]).then(isoOutput);\n    }\n\n    completeJob (job, id) {\n        return this.client.request(this.prefix + 'completeJob', [job, id]).then(isoOutput);\n    }\n\n    failJob (job, id, error) {\n        return this.client.request(this.prefix + 'failJob', [job, id, error]).then(isoOutput);\n    }\n\n    subscribeJob (job, listener) {\n        this.listeners[job] = listener;\n        return this.client.subscribe(this.prefix + 'job.' + job, listener);\n    }\n\n    unsubscribeJob (job) {\n        return this.client.unsubscribe(this.prefix + 'job.' + job, this.listeners[job]);\n    }\n}\n\nclass Worker extends EventEmitter {\n    constructor (manager, jobName, onProcess) {\n        super();\n        this.manager = manager;\n        this.jobName = jobName;\n        this.onProcess = onProcess;\n        this.status = Idle;\n        this.workerId = nextWorkerId();\n        this.job = null;\n        this.timer = null;\n        this.stopping = true;\n    }\n\n    /**\n     * start to grab and process new job.\n     */\n    start () {\n        console.log('starting');\n        if (!this.stopping) return;\n        this.stopping = false;\n        this.requestJob();\n    }\n\n    /**\n     * stop gracefully - stop to grab and process new job\n     * after finishing the current job.\n     */\n    stop () {\n        if (this.stopping) return;\n        this.stopping = true;\n        this.stopRetry();\n    }\n\n    notify () {\n        if (this.status === WIP) return;\n        this.requestJob();\n    }\n\n    failJob (msg) {\n        this.startRetry(CommitRetries, RetryInterval, () => {\n            return this.manager.failJob(this.job._id, msg).then((output) => {\n                if (!output.code) {\n                    console.log('failJob - ok');\n                    this.stopRetry();\n                    this.requestJob();\n                } else {\n                    console.error('failJob - error: ' + output.msg);\n                }\n                return output;\n            });\n        });\n    }\n\n    completeJob () {\n        this.startRetry(CommitRetries, RetryInterval, () => {\n            return this.manager.completeJob(this.job._id).then((output) => {\n                if (!output.code) {\n                    console.log('completeJob - ok');\n                    this.stopRetry();\n                    this.requestJob();\n                } else {\n                    console.error('completeJob - error: ' + output.msg);\n                }\n                return output;\n            });\n        });\n    }\n\n    processJob (job) {\n        job.workerId = this.workerId;\n        this.job = job;\n        this.status = WIP;\n        try {\n            this.onProcess(job, (err) => {\n                if (err) {\n                    console.error(err);\n                    const msg = err instanceof Error ? err.stack || err.toString() : '' + err;\n                    return this.failJob(msg);\n                } else {\n                    return this.completeJob();\n                }\n            });\n        } catch (e) {\n            console.error(e);\n            return this.failJob(e.stack || e.toString());\n        }\n    }\n\n    requestJob () {\n        this.status = Idle;\n        const doRequestJob = () => {\n            return this.manager.requestJob()\n                .then((output) => !output.code && !output.job ? LostJobData.clone() : output)\n                .then((output) => {\n                    if (output.code) {\n                        console.log('requestJob - error: ' + output.msg);\n                    } else {\n                        console.log('requestJob - ok');\n                        this.stopRetry();\n                        this.processJob(output.job);\n                    }\n                    return output;\n                });\n        };\n        this.startRetry(CheckoutRetries, RetryInterval, doRequestJob, () => {\n            this.startRetry(0, PingInterval, doRequestJob);\n        });\n    }\n\n    startRetry (retries, interval, fn, next) {\n        if (retries === 0) { // poll mode\n            this.timer = setInterval(fn, interval);\n        } else { // retry mode\n            this.timer = setInterval(\n                () => {\n                    console.log('retries - ' + retries);\n                    if (retries-- <= 0) {\n                        this.stopRetry();\n                        next && next();\n                    } else {\n                        fn();\n                    }\n                }, interval);\n        }\n    }\n\n    stopRetry () {\n        if (!this.timer) return;\n        clearInterval(this.timer);\n        this.timer = null;\n    }\n}\n\nclass Manager extends EventEmitter {\n    constructor (queue, job, concurs, onProcess) {\n        super();\n        this.queue = queue;\n        this.job = job;\n        this.concurs = concurs;\n        this.workers = [];\n        this.onProcess = onProcess;\n        this.agent = new QueueAgent(queue.client, { prefix: queue.prefix });\n        this.started = false;\n        this._init();\n    }\n\n    /**\n     * start to get notified/grab new jobs and begin to work on them\n     * @returns {Promise.<Output>}\n     */\n    start () {\n        if (this.started) return;\n        for (let worker of this.workers) worker.start();\n        return this.subscribeJob().then((output) => {\n            if (output.code) return output;\n            this.started = true;\n        });\n    }\n\n    /**\n     * stop accepting new jobs and waiting WIP jobs ending\n     * @returns {Promise.<Output>}\n     */\n    stop () {\n        if (!this.started) return;\n        for (let worker of this.workers) worker.stop();\n        return this.unsubscribeJob().then((output) => {\n            if (output.code) return output;\n            this.started = false;\n        });\n    }\n\n    notify (queued) {\n        if (queued <= 0) return;\n        for (let i = 0; i < this.workers; i++) this.workers[i].notify(queued);\n    }\n\n    requestJob () { return this.agent.requestJob(this.job); }\n    completeJob (id) { return this.agent.completeJob(this.job, id); }\n    failJob (id, error) { return this.agent.failJob(this.job, id, error); }\n    subscribeJob () { return this.agent.subscribeJob(this.job, this.notify.bind(this)); }\n    unsubscribeJob () { return this.agent.unsubscribeJob(this.job); }\n\n    _init () {\n        for (let i = 0; i < this.concurs; i++) {\n            let worker = new Worker(this, this.job, this.onProcess);\n            this.workers.push(worker);\n        }\n    }\n}\n\nclass Queue extends EventEmitter {\n    /**\n     * the namespace of the queue in server-side which the worker\n     * connects and works on\n     * @returns {string}\n     */\n    static get Name () { return 'default'; }\n\n    /**\n     * the prefix of the primus message of request\n     * @returns {string}\n     */\n    static get Prefix () { return 'queue.' };\n\n    constructor ({ client, name = Queue.Name, prefix = Queue.Prefix }) {\n        super();\n        this.client = client;\n        this.name = name;\n        this.prefix = prefix;\n        this.managers = [];\n        this.agent = new QueueAgent(client, { prefix });\n    }\n\n    shutdown () {\n        for (let manager of this.managers) manager.stop();\n    }\n\n    create (job, data) {\n        return this.agent.createJob(job, data);\n    }\n\n    process (job, concurs, onProcess) {\n        if (!onProcess && typeof concurs === 'function') {\n            concurs = 1;\n            onProcess = concurs;\n        }\n        if (typeof job !== 'string') throw new Error('job should be a string');\n        if (typeof concurs !== 'number') throw new Error('concurs should be a number [1-100]');\n        if (typeof onProcess !== 'function') throw new Error('onProcess should be a function');\n\n        const manager = new Manager(this, job, concurs, onProcess);\n        this.managers.push(manager);\n        return manager.start();\n    }\n}\n\nmodule.exports = Queue;\n"]}